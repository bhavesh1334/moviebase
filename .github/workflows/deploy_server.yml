name: Deploy Server to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Enable pnpm (Corepack) and install dependencies & build
        working-directory: ./server
        run: |
          # enable corepack and activate pnpm
          corepack enable
          corepack prepare pnpm@latest --activate

          # install using pnpm and lockfile (fails if lockfile out of sync)
          pnpm install --frozen-lockfile

          # build
          pnpm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r server/dist deploy/
          cp server/package.json deploy/
          # include pnpm lockfile (if present)
          cp server/pnpm-lock.yaml deploy/ || true
          cp server/ecosystem.config.js deploy/
          echo "${{ secrets.PROD_ENV_FILE }}" > deploy/.env

      - name: Deploy to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "deploy/"
          target: "~/moviebase-server"
          strip_components: 1

      - name: SSH into EC2, enable pnpm and install production deps, restart app
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/moviebase-server

            # Ensure Node is installed (assumes apt-based distro). If Node is already present this returns quickly.
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Install pnpm globally if not already installed
            if ! command -v pnpm >/dev/null 2>&1; then
                echo "Installing pnpm globally..."
                npm install -g pnpm
            fi

            # Install production dependencies using pnpm and lockfile
            pnpm install --prod --frozen-lockfile

            # restart using pm2
            pm2 restart ecosystem.config.js --env production
